"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.OdooClient = void 0;
// src/client.ts
const xmlrpc = __importStar(require("xmlrpc"));
const errors_1 = require("./errors");
class OdooClient {
    constructor(config) {
        var _a;
        this.uid = null;
        this.config = config;
        let baseUrl = config.url;
        let isSecure = false;
        let protocol = 'http://';
        const hasProtocol = baseUrl.startsWith('http://') || baseUrl.startsWith('https://');
        if (!hasProtocol) {
            isSecure = ((_a = config === null || config === void 0 ? void 0 : config.options) === null || _a === void 0 ? void 0 : _a.isSecure) || false;
            protocol = isSecure ? 'https://' : 'http://';
        }
        else {
            protocol = baseUrl.startsWith('http://') ? 'http://' : 'https://';
            isSecure = protocol === 'https://';
            baseUrl = baseUrl.replace(protocol, '');
        }
        const createClient = isSecure ? xmlrpc.createSecureClient : xmlrpc.createClient;
        this.common = createClient(`${protocol}${baseUrl}/xmlrpc/2/common`);
        this.object = createClient(`${protocol}${baseUrl}/xmlrpc/2/object`);
    }
    methodCall(client, method, params) {
        return new Promise((resolve, reject) => {
            client.methodCall(method, params, (error, value) => {
                if (error) {
                    reject(new Error(String(error)));
                }
                else {
                    resolve(value);
                }
            });
        });
    }
    async version() {
        try {
            return await this.methodCall(this.common, 'version', []);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new errors_1.OdooError(`Failed to get version: ${error.message}`);
            }
            throw new errors_1.OdooError('Failed to get version');
        }
    }
    async authenticate() {
        var _a;
        try {
            let params = [this.config.db];
            if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.apiKey) {
                params.push(this.config.apiKey);
            }
            else {
                params = [...params, this.config.username, this.config.password];
            }
            const uid = await this.methodCall(this.common, 'authenticate', [...params, {}]);
            if (!uid) {
                throw new errors_1.OdooAuthenticationError();
            }
            this.uid = uid;
            return uid;
        }
        catch (error) {
            if (error instanceof Error) {
                throw new errors_1.OdooAuthenticationError(error.message);
            }
            throw new errors_1.OdooAuthenticationError();
        }
    }
    async execute(model, method, args = [], kwargs = {}) {
        if (!this.uid) {
            await this.authenticate();
        }
        try {
            return await this.methodCall(this.object, 'execute_kw', [
                this.config.db,
                this.uid,
                this.config.password,
                model,
                method,
                args,
                kwargs,
            ]);
        }
        catch (error) {
            if (error instanceof Error) {
                throw new errors_1.OdooError(`Method ${method} failed on ${model}: ${error.message}`);
            }
            throw new errors_1.OdooError(`Method ${method} failed on ${model}`);
        }
    }
    async search(model, domain, options = {}) {
        return await this.execute(model, 'search', [domain], options);
    }
    async searchCount(model, domain) {
        return await this.execute(model, 'search_count', [domain]);
    }
    async read(model, ids, fields = []) {
        return await this.execute(model, 'read', [ids], { fields });
    }
    async searchRead(model, domain, options = {}) {
        return await this.execute(model, 'search_read', [domain], options);
    }
    async create(model, values) {
        return await this.execute(model, 'create', [values]);
    }
    async write(model, ids, values) {
        return await this.execute(model, 'write', [ids, values]);
    }
    async unlink(model, ids) {
        return await this.execute(model, 'unlink', [ids]);
    }
    async fieldsGet(model, attributes = ['string', 'help', 'type']) {
        return await this.execute(model, 'fields_get', [], { attributes });
    }
}
exports.OdooClient = OdooClient;
